name: fork-auto-create-pull-request-on-upstream

on:
  push:
    branches:
      - '**'

jobs:
  precheck:
    runs-on: ubuntu-latest
    outputs:
      is-fork: ${{ steps.check.outputs.is-fork }}
    steps:
      - name: Check if this is the fork
        id: check
        run: |
          echo "üß† Repo: ${{ github.repository }}"
          if [ "${{ github.repository_owner }}" == "RichLewis007" ]; then
            echo "is-fork=true" >> "$GITHUB_OUTPUT"
            echo "‚úÖ Proceeding in fork"
          else
            echo "is-fork=false" >> "$GITHUB_OUTPUT"
            echo "üö´ Skipping: Not the fork"
          fi

  create-pr:
    needs: precheck
    if: needs.precheck.outputs.is-fork == 'true'
    runs-on: ubuntu-latest

    env:
      GH_TOKEN: ${{ secrets.FORK_GH_TOKEN4 }}

    steps:
      - name: Confirm GH_TOKEN is set
        run: |
          if [ -z "$GH_TOKEN" ]; then
            echo "‚ùå GH_TOKEN is missing. Please set the secret correctly."
            exit 1
          else
            echo "‚úÖ GH_TOKEN appears to be set."
          fi

      - name: Install GitHub CLI
        run: |
          sudo apt update
          sudo apt install -y gh jq

      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Show auth status
        run: gh auth status

      - name: Add upstream remote
        run: git remote add upstream https://github.com/MakerFriends/educational-site-creation.git

      - name: Check if PR should be created
        run: |
          BRANCH_NAME="${GITHUB_REF#refs/heads/}"
          echo "üåø Branch: $BRANCH_NAME"

          IGNORE_BRANCHES=("gh-pages" "sync-fork")
          for IGNORE in "${IGNORE_BRANCHES[@]}"; do
            if [[ "$BRANCH_NAME" == "$IGNORE" ]]; then
              echo "üö´ Skipping PR creation for ignored branch: $BRANCH_NAME"
              exit 0
            fi
          done

          git fetch origin
          git fetch upstream

          if [ "$BRANCH_NAME" == "main" ]; then
            COUNT=$(git rev-list --count remotes/upstream/main..remotes/origin/main)
            echo "üîç Commits to PR: $COUNT"
            if [ "$COUNT" -eq 0 ]; then
              echo "‚úÖ No changes to PR ‚Äî exiting"
              exit 0
            fi
          fi

      - name: Check for existing PR
        id: find-pr
        run: |
          BRANCH_NAME="${GITHUB_REF#refs/heads/}"
          gh pr list --head "$BRANCH_NAME" --state all --json number,state,title,updatedAt \
            | jq -s 'sort_by(.updatedAt) | reverse' > prlist.json

          PR_NUMBER=$(jq -r '.[0].number // empty' prlist.json)
          PR_STATE=$(jq -r '.[0].state // empty' prlist.json)

          echo "PR_NUMBER=$PR_NUMBER" >> "$GITHUB_ENV"
          echo "PR_STATE=$PR_STATE" >> "$GITHUB_ENV"

      - name: Close older PRs from same branch
        if: env.PR_NUMBER != ''
        run: |
          echo "üßπ Closing older PRs from the same branch (excluding latest)"
          jq -c '.[1:]' prlist.json | jq -r '.[].number' | while read -r OLD_PR; do
            echo "üõë Closing old PR #$OLD_PR"
            gh pr close "$OLD_PR" --comment "Closed in favor of newer PR."
          done

      - name: Reopen existing PR if closed
        if: env.PR_STATE == 'CLOSED'
        run: |
          echo "‚ôªÔ∏è Reopening previously closed PR #$PR_NUMBER"
          gh pr reopen "$PR_NUMBER"
          gh pr comment "$PR_NUMBER" --body "üîÅ Reopened automatically due to new push to branch."

      - name: Create new PR if none found
        if: env.PR_NUMBER == ''
        run: |
          BRANCH_NAME="${GITHUB_REF#refs/heads/}"
          echo "üì¨ Creating new PR for: $BRANCH_NAME"
          gh pr create \
            --title "Automated Pull Request: $BRANCH_NAME" \
            --body "Automated Pull Req
