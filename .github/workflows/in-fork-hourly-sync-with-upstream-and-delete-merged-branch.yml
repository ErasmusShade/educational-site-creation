name: in-fork-hourly-sync-with-upstream-and-delete-merged-branch
# by Rich Lewis - @RichLewis007

# Only run these jobs in the Fork, not the Upstream Repo.
# 1. Sync with upstream (Fetch, Merge upstream/main into origin/main, Push changes back to origin)
# 2. Get all branches in Fork (except main)
# 3. Check for merged PRs, comment with timestamp, and delete merged branch from forked repo.

# To post comments and delete branches, your GH_TOKEN (used in secrets.FORK_GH_TOKEN4) must have:
#    Repo scope
#    Write access to your fork

on:
  schedule:
    - cron: '0 * * * *'  # Runs every hour
  workflow_dispatch:

jobs:
  # Immediately cancel workflow if this is not the fork
  precheck:
    runs-on: ubuntu-latest
    steps:
      - name: Cancel if not running in fork
        run: |
          echo " ----==== Action version: 1.00 ====---- "
          echo "üîç Running in repo: ${{ github.repository }}"
          echo "üîç Repository owner: ${{ github.repository_owner }}"
          if [ "${{ github.repository_owner }}" != "RichLewis007" ]; then
            echo "‚õî Exiting: This workflow is only for the fork."
            exit 0
          fi

  # SYNC job ==================================================================
  # Sync with upstream (Fetch, Merge upstream/main into origin/main, Push changes back to origin)
  sync:
    needs: precheck
    if: ${{ github.repository_owner == 'RichLewis007' }}
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ secrets.FORK_GH_TOKEN4 }}
    steps:
      - name: Confirm GH_TOKEN is set
        run: |
          if [ -z "$GH_TOKEN" ]; then
            echo "‚ùå GH_TOKEN is missing. Please set the secret correctly."
            exit 1
          else
            echo "‚úÖ GH_TOKEN appears to be set."
          fi

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Show auth status
        run: gh auth status

      - name: Set up Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Add upstream remote and fetch
        run: |
          git remote add upstream https://github.com/MakerFriends/educational-site-creation.git
          git fetch upstream

      - name: Merge upstream/main into origin/main
        run: |
          echo "üì• Checking out main branch..."
          git checkout main
          
          echo "üîÑ Merging upstream/main into main..."
          git merge upstream/main --no-edit || echo "Already up to date"

          #x Use --allow-unrelated-histories only when histories are disconnected
          #x git merge upstream/main --no-edit --allow-unrelated-histories || echo "Already up to date"

          git log --oneline --graph --decorate -n 10

      - name: Push changes back to origin
        run: |
          echo "üöÄ Pushing merged changes back to origin..."
          git push https://x-access-token:${GH_TOKEN}@github.com/${{ github.repository }} main

  # CLEANUP job ==================================================================
  # - Get all branches in fork (except main)
  # - Check for merged PRs, comment with ET timestamp, and delete
  cleanup:
    needs: sync
    if: ${{ github.repository_owner == 'RichLewis007' }}
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ secrets.FORK_GH_TOKEN4 }}
    steps:
      - name: Install GitHub CLI and confirm auth
        run: |
          sudo apt update
          sudo apt install -y gh jq
          gh auth status

      # Even though gh pr merge technically supports API-based merging, it still invokes git internally in some situations‚Äîespecially when trying to delete branches or resolve merge base state.
      # To safely enable GitHub CLI operations (like gh pr merge) that may call git, you must run actions/checkout, but you can do it in read-only, shallow mode and detached HEAD, like this.
      - name: Minimal checkout for GH CLI merge compatibility
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          ref: ''

      - name: Check for merged PRs, comment with timestamp, and delete
        run: |
          
          echo "üîç Detecting default branch..."
          DEFAULT_BRANCH=$(gh repo view RichLewis007/educational-site-creation --json defaultBranchRef -q '.defaultBranchRef.name')
          DEFAULT_BRANCH=$(echo "$DEFAULT_BRANCH" | tr -d '\r\n')

          echo "üß≠ Default branch: $DEFAULT_BRANCH"
          
          echo "üîê Verifying repo access with gh repo view..."
          gh repo view RichLewis007/educational-site-creation || {
            echo "‚ùå Unable to access repo. Check GH_TOKEN permissions."
            exit 1
          }

          echo "üìÇ Fetching all Fork branches from GitHub API..."
          if ! gh api repos/RichLewis007/educational-site-creation/branches \
            --paginate \
            -q '.[] | .name' > all-branches.txt; then
            echo "‚ùå Failed to fetch branches. Possible auth error or repo access issue."
            exit 1
          fi
      
          echo "üßπ Filtering out default branch..."
          awk -v def="$DEFAULT_BRANCH" '$0 != def' all-branches.txt > fork-branches.txt
      
          echo "‚úÖ Filtered branch list (excluding '$DEFAULT_BRANCH'):"
          if [ -s fork-branches.txt ]; then
            nl fork-branches.txt
          else
            echo "(none found after filtering)"
            head -n 5 all-branches.txt | cat -A
          fi
          
          # Use New York timezone for U.S. Eastern Time (accounts for DST)
          TIMESTAMP=$(TZ="America/New_York" date +"%Y-%m-%d %I:%M:%S %p %Z")
          echo "üïí Local timestamp for PR comments: $TIMESTAMP"

          if [ ! -s fork-branches.txt ]; then
            echo "‚ö†Ô∏è No branches found to process. Exiting cleanup."
            head -n 5 all-branches.txt | cat -A
            exit 0
          fi

          while read branch; do
            echo "üîÅ Processing branch: '$branch'"
            
            # echo "üîç Checking Upstream for merged PR for Fork branch: $branch"
            # x pr_number=$(gh pr list --head "$branch" --state merged --json number --jq '.[0].number')
            
            echo "üîç Checking for merged PR in upstream from fork branch: RichLewis007:$branch"
            
            #pr_number=$(gh pr list --repo MakerFriends/educational-site-creation --head "RichLewis007:$branch" --state merged --json number --jq '.[0].number')
            #echo "All PRs: #$pr_number"

            # ---
              #            --state merged \
            
            echo "üìã All matching merged PRs for branch '$branch':"
            #            --head "RichLewis007:$branch" --state merged
            
            echo "------------------------"
            gh pr list --repo MakerFriends/educational-site-creation \
              --state merged \
              --json number,title,state,headRefName,headRepositoryOwner \
              --jq '.[] | select(.headRepositoryOwner.login == "RichLewis007") | "\(.number) \(.headRefName) \(.title)"'
            
            echo "------------------------"
            gh pr list --repo MakerFriends/educational-site-creation \
              --state merged \
              --json number,headRefName,headRepositoryOwner \
              --jq '.[] | select(.headRefName == "$branch") | "\(.number)"'

            echo "------------------------ .headRepositoryOwner.login == RichLewis007 and "
            
            pr_number=$(gh pr list --repo MakerFriends/educational-site-creation \
              --state merged \
              --json number,headRefName,headRepositoryOwner \
              --jq ".[] | select(.headRepositoryOwner.login == \"RichLewis007\" and .headRefName == \"$branch\") | .number")

            # ---      
            #           --json number,title,state,headRefName \
            #--jq '.[] | "PR #\(.number): \(.title) [\(.state)] from \(.headRefName)"'
              
            #pr_number=$(gh pr list --repo MakerFriends/educational-site-creation --head "RichLewis007:$branch" --state merged --json number --jq '.[0].number')

            # pr_number=241
            
            if [ -n "$pr_number" ]; then
              echo "‚úÖ Merged PR found: #$pr_number"

              COMMENT="üßπ This branch had a PR which was merged with the upstream repo, so it's being deleted from the forked repo. üóëÔ∏è\n\nüïí Timestamp: $TIMESTAMP\nüë§ Ping: @RichLewis007"
              echo "üí¨ Commenting on PR #$pr_number"
              gh pr comment "$pr_number" --body "$COMMENT"

              echo "üóëÔ∏è Deleting branch '$branch' from fork..."
              gh api --method DELETE repos/RichLewis007/educational-site-creation/git/refs/heads/"$branch"
            else
              echo "‚è© No merged PR found for branch '$branch'. Skipping."
            fi
          done < fork-branches.txt
