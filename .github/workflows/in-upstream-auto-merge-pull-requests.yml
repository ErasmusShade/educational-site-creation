name: in-upstream-auto-merge-pull-requests
# By Rich Lewis RichLewis007

on:
  pull_request_target:
    types: [opened, synchronize, reopened]

  workflow_dispatch:
    inputs:
      pr_number:
        description: "Optional PR number to manually merge (leave blank to process all PRs)"
        required: false

jobs:

  precheck:
    runs-on: ubuntu-latest
    steps:
      - name: Cancel if not running in upstream repo
        run: |
          echo "üîç Running in repo: ${{ github.repository }}"
          if [ "${{ github.repository_owner }}" != "MakerFriends" ]; then
            echo "‚õî Exiting: This workflow is only for the upstream repo."
            exit 0
          fi

  auto-merge:
    needs: precheck
    if: ${{ github.repository_owner == 'MakerFriends' }}
    runs-on: ubuntu-latest

    env:
      GH_TOKEN: ${{ secrets.UPSTREAM_GH_TOKEN }}

    permissions:
      pull-requests: write
      contents: write

    steps:
      - name: Confirm GH_TOKEN is set and show auth status
        run: |
          if [ -z "$GH_TOKEN" ]; then
            echo "‚ùå GH_TOKEN is missing. Please set the UPSTREAM_GH_TOKEN secret."
            exit 1
          fi
          echo "‚úÖ GH_TOKEN is set. Checking auth status..."
          gh auth status


      - name: Determine PRs to process
        id: gather
        run: |
          if [[ "${{ github.event_name }}" == "pull_request_target" ]]; then
            echo "PR_LIST=${{ github.event.pull_request.number }}" >> "$GITHUB_OUTPUT"
          elif [[ -n "${{ inputs.pr_number }}" ]]; then
            echo "PR_LIST=${{ inputs.pr_number }}" >> "$GITHUB_OUTPUT"
          else
            echo "üîç Gathering all open PRs labeled 'automerge'..."
            gh pr list --state open --json number,labels \
              --jq '[.[] | select(.labels[].name == "automerge") | .number]' > pr_numbers.json

            PR_LIST=$(jq -r '. | join(" ")' pr_numbers.json)
            if [[ -z "$PR_LIST" ]]; then
              echo "‚ùå No PRs found with 'automerge' label. Exiting."
              exit 0
            fi
            echo "Found PRs: $PR_LIST"
            echo "PR_LIST=$PR_LIST" >> "$GITHUB_OUTPUT"
          fi

      - name: Process and merge PRs
        run: |
          retry() {
            local tries=3
            local delay=5
            local count=0
            until "$@"; do
              exit_code=$?
              count=$((count + 1))
              if [ "$count" -ge "$tries" ]; then
                echo "‚ùå Failed after $tries attempts: $*"
                return "$exit_code"
              fi
              echo "‚è≥ Retry $count/$tries failed. Waiting $delay seconds..."
              sleep "$delay"
              delay=$((delay * 2))  # exponential backoff
            done
            return 0
          }

          for PR_NUM in ${{ steps.gather.outputs.PR_LIST }}; do
            echo "üîç Evaluating PR #$PR_NUM"

            retry gh pr view "$PR_NUM" --json number,title,state,mergeable,labels,isCrossRepository --jq '.' > pr.json
            PR_JSON=$(cat pr.json)

            echo "$PR_JSON" | jq '.'
            MERGEABLE=$(jq -r '.mergeable' pr.json)
            STATE=$(jq -r '.state' pr.json)
            LABELS=$(jq -r '[.labels[].name] | join(", ")' pr.json)
            IS_FORK=$(jq -r '.isCrossRepository' pr.json)

            echo "üìÑ State: $STATE"
            echo "üìé Labels: $LABELS"
            echo "üîÄ Mergeable: $MERGEABLE"
            echo "üîó From fork: $IS_FORK"

            if [[ "$STATE" != "OPEN" ]]; then
              echo "‚ùå PR is not open. Skipping."
              gh pr comment "$PR_NUM" --body "‚ùå Skipped: PR is not open."
              continue
            fi

            if [[ "$LABELS" != *"automerge"* ]]; then
              echo "‚ùå PR is missing 'automerge' label. Skipping."
              gh pr comment "$PR_NUM" --body "‚ùå Skipped: Missing required label \`automerge\`."
              continue
            fi

            if [[ "$LABELS" == *"do-not-merge"* ]]; then
              echo "‚ùå PR has 'do-not-merge' label. Skipping."
              gh pr comment "$PR_NUM" --body "‚ùå Skipped: PR has blocking label \`do-not-merge\`."
              continue
            fi

            if [[ "$MERGEABLE" != "MERGEABLE" ]]; then
              echo "‚ùå PR is not mergeable (status: $MERGEABLE). Skipping."
              gh pr comment "$PR_NUM" --body "‚ùå Skipped: PR is not currently mergeable (status: \`$MERGEABLE\`)."
              continue
            fi

            echo "‚úÖ All conditions met. Attempting to merge PR #$PR_NUM..."
            if retry gh pr merge "$PR_NUM" \
              --squash \
              --delete-branch \
              --subject "Auto-merged PR #$PR_NUM" \
              --body "‚úÖ Auto-merged because all conditions were met."; then
              echo "‚úÖ PR #$PR_NUM merged and branch deletion attempted."
            else
              echo "‚ö†Ô∏è PR #$PR_NUM was merged, but branch deletion may have failed."
              gh pr comment "$PR_NUM" --body "‚úÖ PR was auto-merged, but the source branch could not be deleted (likely due to worktree usage or forked main)."
            fi
          done
